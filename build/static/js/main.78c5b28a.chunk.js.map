{"version":3,"sources":["containers/Graph.jsx","containers/PerCards.jsx","containers/TableBody.jsx","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Graph","plotData","chartRef","React","createRef","useEffect","myChartRef","current","getContext","Chart","type","data","labels","map","d","datasets","label","borderColor","pointRadius","pointHoverRadius","fill","options","className","id","ref","PerCards","actual","header","TableBody","style","alignContent","margin","width","length","status","index","state","active","confirmed","recovered","deaths","key","Home","useState","chartData","setChartData","tableData","setTableData","total","setTotal","fetch","then","json","result","setValues","icon","faMap","marginLeft","deathrate","recrate","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78c5b28a.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport Chart from 'chart.js'\r\nimport './styles.css'\r\n\r\nconst Graph = ({plotData}) => {\r\n\r\n    const chartRef = React.createRef();\r\n    \r\n    useEffect(() => {\r\n        const myChartRef = chartRef.current.getContext(\"2d\");\r\n    \r\n        new Chart(myChartRef, {\r\n            type: \"line\",\r\n            data: {\r\n                //Bring in data\r\n                labels: plotData.map(d => d['date']),\r\n                datasets: [\r\n                    {\r\n                        label: \"Daily Cases\",\r\n                        data: plotData.map(d => d['dailyconfirmed']),\r\n                        borderColor: '#3cba9f',\r\n                        pointRadius: '5',\r\n                        pointHoverRadius: '5',\r\n                        fill: false,\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                //Customize chart options\r\n            }\r\n        });\r\n    }, [chartRef,plotData])\r\n\r\n        return (\r\n            <div className='chart-container'>  \r\n                <canvas id=\"myChart\" ref={chartRef} />\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Graph\r\n","import React from 'react'\r\n\r\nconst PerCards = ({actual, header}) => {\r\n\r\n    return (\r\n        <div className='col-5 card'>\r\n            <h3>{header}</h3>\r\n            <h2>{actual}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PerCards\r\n","import React from 'react';\r\n\r\nconst TableBody = ({data}) =>{ \r\n    return(\r\n        <div>\r\n            <table style={{alignContent:'center', margin:'auto', width:'100%'}}>\r\n                <tbody id='state' className='container'>\r\n                    <tr id='state-header'  >\r\n                        <th >STATE</th>\r\n                        <th >ACTIVE</th>\r\n                        <th >CONFIRMED</th>\r\n                        <th >RECOVERED</th>\r\n                        <th >DEATHS</th>\r\n                    </tr>\r\n                    {data.length>0 ? (\r\n                        data.map((status, index) => {\r\n                            const{ state,active,confirmed,recovered,deaths } = status\r\n                            return(\r\n                                <tr id='state-data' key={index}  >\r\n                                    <td >{state}</td>\r\n                                    <td >{active}</td>\r\n                                    <td >{confirmed}</td>\r\n                                    <td >{recovered}</td>\r\n                                    <td >{deaths}</td>\r\n                                </tr>\r\n                            )\r\n                        } )\r\n                    ):(<div></div>) }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableBody","import React, { useState, useEffect } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { faMap } from \"@fortawesome/free-regular-svg-icons\";\r\nimport './styles.css'\r\nimport Graph from './Graph'\r\nimport PerCards from './PerCards'\r\nimport TableBody from './TableBody'\r\n\r\nconst Home = () => {\r\n\r\n  const [chartData, setChartData] = useState([])\r\n  const [tableData, setTableData] = useState([])\r\n  const [total, setTotal] = useState({})\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('http://corona-ind-19-20.herokuapp.com/api/')\r\n    .then(status => status.json())\r\n    .then(result => setValues(result))\r\n  }, [])\r\n  \r\n  const setValues = (result) => {\r\n    setTableData(result['statewise'])\r\n    setTotal(result['total'])\r\n    setChartData(result['cases_time_series'])\r\n  } \r\n\r\n    return (\r\n      <div className='container-fluid main'>\r\n        <div className='row header'>\r\n          <FontAwesomeIcon icon={ faMap }  className='icon' />\r\n          <h4 className='col-xs-4'>DASHBOARD</h4>\r\n        </div>\r\n        <div className='row' style={{marginLeft: '40px'}}>  \r\n          <div className='col'>  \r\n            <Graph plotData={chartData} />\r\n          </div>\r\n          <div className='col'>\r\n            <div className='row'>\r\n              <PerCards actual={total.active} header='Active Cases' />\r\n              <PerCards actual={total.confirmed} header='Total Cases' />\r\n            </div>\r\n            <div className='row'> \r\n              <PerCards actual={total.deathrate} header='Death Rate' />\r\n              <PerCards actual={total.recrate} header='Recovery Rate' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='table-container'>\r\n          <TableBody data={tableData} />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\n\r\nimport Home from './containers/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  \r\n    <App />,\r\n  \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}